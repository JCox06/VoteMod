// MIT License
//
//        Copyright (c) 2021 Jacob Cox
//
//        Permission is hereby granted, free of charge, to any person obtaining a copy
//        of this software and associated documentation files (the "Software"), to deal
//        in the Software without restriction, including without limitation the rights
//        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//        copies of the Software, and to permit persons to whom the Software is
//        furnished to do so, subject to the following conditions:
//
//        The above copyright notice and this permission notice shall be included in all
//        copies or substantial portions of the Software.
//
//        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//        SOFTWARE.

package uk.co.jcox.votemod.util;

import org.bukkit.Bukkit;
import org.bukkit.OfflinePlayer;
import org.bukkit.entity.Player;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Scanner;
import java.util.UUID;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicReference;

public class PlayerFetcher {

    private static final String LINK = "https://api.mojang.com/users/profiles/minecraft/";
    private final String playerName;
    private UUID uuid;
    private ExecutorService service;


    public PlayerFetcher(String playerName) {
        this.playerName = playerName;
        service = Executors.newCachedThreadPool();
    }

    private UUID get() {

        Messenger.log("Attempting to get external user UUID: " + playerName);

        try {
            URL url = new URL(LINK + playerName);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.connect();

            if ((connection.getResponseCode() / 100) != 2) {
                //todo - Need to report an error here!
                throw new RuntimeException();
            }

            StringBuilder response = new StringBuilder();
            Scanner scanner = new Scanner(url.openStream());

            while(scanner.hasNext()) {
                response.append(scanner.nextLine());
            }

            scanner.close();

            JSONParser parse = new JSONParser();
            JSONObject data = (JSONObject) parse.parse(response.toString());

            Messenger.log("Received external UUID for " + playerName + ": " + data.get("id"));

            return UUID.fromString( (String) data.get("id"));

        } catch (Exception e) {
            //todo need to print error
            e.printStackTrace();
        }

        return null;
    }

    public UUID getUuid() {
        if(this.uuid != null) {
            return this.uuid;
        }

        AtomicReference<UUID> name = new AtomicReference<>();
        service.execute(() -> name.set(get()));

        this.uuid = name.get();
        return name.get();
    }

    public Player getPlayer() {
        return Bukkit.getPlayer(this.uuid);
    }
}