// MIT License
//
//        Copyright (c) 2021 Jacob Cox
//
//        Permission is hereby granted, free of charge, to any person obtaining a copy
//        of this software and associated documentation files (the "Software"), to deal
//        in the Software without restriction, including without limitation the rights
//        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//        copies of the Software, and to permit persons to whom the Software is
//        furnished to do so, subject to the following conditions:
//
//        The above copyright notice and this permission notice shall be included in all
//        copies or substantial portions of the Software.
//
//        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//        SOFTWARE.

package uk.co.jcox.votemod;

import org.bukkit.Bukkit;
import org.bukkit.OfflinePlayer;
import org.bukkit.entity.Player;
import uk.co.jcox.votemod.util.Messenger;
import uk.co.jcox.votemod.util.PlayerFetcher;
import uk.co.jcox.votemod.votes.BaseVote;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.atomic.AtomicBoolean;

import static uk.co.jcox.votemod.Main.*;


public class VoteManager {
    private Map<String, BaseVote> votes;
    private final Main plugin;
    private boolean broadCastVoteDetails;

    public VoteManager(Main plugin) {
        this.plugin = plugin;
        votes = new HashMap<String, BaseVote>();
        this.broadCastVoteDetails = plugin.getConfig().getBoolean("broadcast");
    }

    public void newVote(BaseVote vote) {

        Status res = checkVote(vote);

        if(res != Status.OK) {
            Messenger.log(res.getMessage());
            Messenger.sendMessage(vote.getSourcePlayer(), plugin.getLangValue(res.getMessage()));
            return;
        }

        this.votes.put(vote.getTargetPlayer(), vote);
        if(broadCastVoteDetails) {
            Messenger.broadcast(vote.getSourcePlayer() + " " + plugin.getLangValue("start-vote-message") + " " + vote.getTargetPlayer());
        }
    }


    public void vote(Player voter, String target) {
        Status res = checkVote(voter, target);

        if(res != Status.OK) {
            Messenger.log(plugin.getLangValue(res.getMessage()));
            Messenger.sendMessage(voter , res.getMessage());
            return;
        }

        BaseVote selected = this.votes.get(target);
        selected.addVoter(voter);

        if(broadCastVoteDetails) {
            Messenger.broadcast(voter.getName() + " " + plugin.getLangValue("voted-message"));
        }
    }



    public void remove(Player source, String target) {
        //todo -> Broadcast this event
        Status res = checkVote(source, target);

        if(res == Status.OK) {
            remove(target);
        } else {
            Messenger.sendMessage(source, plugin.getLangValue("unable-to-remove"));
        }

    }


    public void remove(String target) {
        Messenger.log("vote-removed-log");
        this.votes.remove(target);
        if(broadCastVoteDetails) {
            Messenger.broadcast(plugin.getLangValue("removed-message") + " "  + target);
        }
    }




    public Status checkVote(BaseVote vote) {

        if(! checkNumberOfOngoingVotes()) {
            return Status.TOO_MANY_ONGOING;
        }

       if(checkTargetHasBypass(vote.getTargetPlayer())) {
           return Status.TARGET_HAS_BYPASS;
       }

        if(checkForMissingVotePermission(vote.getSourcePlayer())) {
            return Status.SOURCE_CANT_VOTE;
        }

        return Status.OK;
    }

    public Status checkVote(Player source, String target) {
        if(checkForMissingVotePermission(source)) {
            return Status.SOURCE_CANT_VOTE;
        }

        if(! this.votes.containsKey(target)) {
            return Status.NO_SUCH_VOTE;
        }

        return Status.OK;
    }


    private boolean checkNumberOfOngoingVotes() {
        if(votes.size() >= plugin.getConfig().getInt("allowed-ongoing-votes")) {
            //There are too many ongoing votes
            return false;
        }
        return true;
    }

    private void checkTargetHasBypass(String targetPlayer) {

        CompletableFuture<UUID> cf = new CompletableFuture<>();

        Bukkit.getScheduler().runTaskAsynchronously(plugin, new PlayerFetcher(targetPlayer, cf));
        cf.whenComplete( (res, err) -> {
           if(err != null) {
               err.printStackTrace();
               return;
           }

           OfflinePlayer op = Bukkit.getOfflinePlayer(res);
            String world = Bukkit.getWorlds().get(0).getName();
            if(getPermissions().playerHas(world, op, "votemod.bypass")) {
            }

        });

    }

    private boolean checkForMissingVotePermission(Player source) {
        if(getPermissions().playerHas(source, "votemod.vote")
        || getPermissions().playerHas(source, "votemod.admin")) {
            return false;
        }
        return true;
    }


}

enum Status {
    OK("All Okay!"),
    SOURCE_CANT_VOTE("no-vote-message"),
    NO_SUCH_VOTE("no-such-vote-message"),
    TARGET_HAS_BYPASS("bypass-message"),
    TOO_MANY_ONGOING("ongoing-message");

    private final String message;

    Status(String message) {
        this.message = message;
    }

    public String getMessage() {
        return message;
    }

}

